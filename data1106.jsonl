{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    count = 0\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n            current_group += char\n        elif char == \")\":\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = \"\"\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    result = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    result.append(max_depth)\n\n    return result"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_chars = set()\n    \n    # Iterate through the string and add each character to the set\n    for char in string:\n        distinct_chars.add(char)\n    \n    # Return the length of the set, which represents the number of distinct characters\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x])\n\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = [(x - min_num) / (max_num - min_num) for x in numbers]\n    return rescaled"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 != 0:\n        raise ValueError(\"List xs must have an even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"Largest non-zero coefficient must be non-zero\")\n\n    # Find the roots of the polynomial\n    roots = [x for x in range(-100, 101) if poly(xs, x) == 0]\n\n    # Return the first root found\n    return roots[0] if roots else None"}
{"task_id": "HumanEval/33", "completion": "    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(sorted(l[i:i+3])[i%3])\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_val = l[0]\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n    \n    result = l.copy()\n    for i in range(len(even_indices)):\n        result[even_indices[i]] = sorted_even_values[i]\n    \n    return result"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n    return fibonacci(i)"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2  # Number of collisions is equal to the number of pairs of cars."}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result\n\nprint(change_base(8, 3))  # '22'\nprint(change_base(8, 2))  # '1000'\nprint(change_base(7, 2))  # '111'"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            result = a + b + c + d\n            a, b, c, d = b, c, d, result\n        return result\n\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    text = ''.join(e for e in text if e.isalnum())\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return (2 ** n) % p"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    # Create a set of unique characters in each word\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Check if the sets are equal\n    return set_s0 == set_s1"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Input must be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/58", "completion": "    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor(2048))"}
{"task_id": "HumanEval/60", "completion": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n\nprint(derivative([3, 1, 2, 4, 5]))\nprint(derivative([1, 2, 3]))"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c\n\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        return shifted_str"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    fruit_counts = [int(x) for x in s.split() if x.isdigit()]\n    total_fruits = n - sum(fruit_counts)\n    return total_fruits"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    else:\n        smallest_even = min(even_values)\n        smallest_even_index = arr.index(smallest_even)\n        return [smallest_even, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    result = -1\n    for key, value in freq_dict.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n\nprint(will_it_fly([1, 2], 5))  # False\nprint(will_it_fly([3, 2, 3], 1))  # False\nprint(will_it_fly([3, 2, 3], 9))  # True\nprint(will_it_fly([3], 5))  # True"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False\n\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(20))  # False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return n == 1\n    elif n == 1:\n        return x == 1\n    else:\n        power = 1\n        while power < x:\n            power *= n\n        return power == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        a = -a\n    root = round(a ** (1/3))\n    return root ** 3 == a\n\nprint(iscube(1)) # True\nprint(iscube(2)) # False\nprint(iscube(-1)) # True\nprint(iscube(64)) # True\nprint(iscube(0)) # True\nprint(iscube(180)) # False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\n# Test cases\nprint(hex_key(\"AB\"))  # 1\nprint(hex_key(\"1077E\"))  # 2\nprint(hex_key(\"ABED1A33\"))  # 4\nprint(hex_key(\"123456789ABCDEF0\"))  # 6\nprint(hex_key(\"2020\"))  # 2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    # Convert N to binary and remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of the digits in binary\n    binary_sum = sum(int(digit) for digit in binary_str)\n    \n    # Convert the sum to binary and return as a string\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            index = (alphabet.index(char) + 2) % 26\n            encrypted += alphabet[index]\n        else:\n            encrypted += char\n    return encrypted\n\nprint(encrypt('hi'))  # returns 'lm'\nprint(encrypt('asdfghjkl'))  # returns 'ewhjklnop'\nprint(encrypt('gf'))  # returns 'kj'\nprint(encrypt('et'))  # returns 'ix'"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    else:\n        sorted_lst = sorted(lst)\n        second_smallest = sorted_lst[1]\n        if second_smallest == sorted_lst[0]:\n            return None\n        else:\n            return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    sentences = S.split('?')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    sentences = S.split('!')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if primes:\n        max_prime = max(primes)\n        return sum_of_digits(max_prime)\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nprint(count_up_to(5))  # [2,3]\nprint(count_up_to(11))  # [2,3,5,7]\nprint(count_up_to(0))   # []\nprint(count_up_to(20))  # [2,3,5,7,11,13,17,19]\nprint(count_up_to(1))   # []\nprint(count_up_to(18))  # [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a_unit = abs(a) % 10\n    b_unit = abs(b) % 10\n    return a_unit * b_unit"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(n + 2*i)\n        else:\n            pile.append(n + 2*i + 1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    words = s.replace(\",\", \" \").split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        return bin(rounded_avg)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Create a dictionary to map integers to their corresponding names\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter out numbers that are not between 1 and 9\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each integer to its corresponding name\n    result = [num_to_name[x] for x in reversed_arr]\n    \n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Count the number of odd numbers in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # If there are no odd numbers in lst1, return \"YES\"\n    if odd_count == 0:\n        return \"YES\"\n    \n    # Otherwise, return \"NO\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    # Split the input string into a list of lowercase letters\n    letters = test.split()\n\n    # Create an empty dictionary to store the count of each letter\n    letter_count = {}\n\n    # Iterate through the list of letters and count the occurrences of each letter\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    # Find the maximum occurrence of a letter\n    max_count = max(letter_count.values())\n\n    # Create a new dictionary to store the letters with the maximum occurrence\n    max_letters = {k: v for k, v in letter_count.items() if v == max_count}\n\n    return max_letters"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for string in lst:\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    \n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "    # Create a custom sorting function that sorts based on number of ones in binary representation\n    # If number of ones is the same, sort based on decimal value\n    def custom_sort(x):\n        return bin(x).count('1'), x\n\n    # Sort the array using the custom sorting function\n    arr.sort(key=custom_sort)\n\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for letter in word:\n            if letter.lower() not in ['a', 'e', 'i', 'o', 'u'] and letter.isalpha():\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] in consonants and word[i+1] in consonants:\n                return word[i]\n    \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    return 'No'\n                else:\n                    stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    count = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n            if count == 2:\n                break\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    result.append(1)\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        words = txt.split(',')\n        if len(words) > 1:\n            return words\n        else:\n            count = 0\n            for char in txt:\n                if char.islower():\n                    if ord(char) % 2 != 0:\n                        count += 1\n            return count"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return \"NO\"\n    length = intersection_end - intersection_start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    else:\n        product = 1\n        sum_magnitudes = 0\n        for num in arr:\n            product *= 1 if num > 0 else -1 if num < 0 else 0\n            sum_magnitudes += abs(num)\n        return product * sum_magnitudes"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def isValid(x, y):\n        return 0 <= x < n and 0 <= y < m\n    \n    def dfs(x, y, path, k):\n        if k == 0:\n            return path\n        visited[x][y] = True\n        min_path = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if isValid(nx, ny) and not visited[nx][ny]:\n                new_path = dfs(nx, ny, path + [grid[nx][ny]], k - 1)\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n        visited[x][y] = False\n        return min_path\n    \n    min_path = []\n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [grid[i][j]], k - 1)\n            if not min_path or path < min_path:\n                min_path = path\n    return min_path\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3)) # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1)) # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 2]\n    else:\n        sequence = [1, 1, 2]\n        for i in range(3, n + 1):\n            next_num = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n            sequence.append(next_num)\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    if product == 1:\n        return 0\n    else:\n        return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 2"}
{"task_id": "HumanEval/133", "completion": "    sum = 0\n    for num in lst:\n        sum += (int(num) ** 2)\n    return sum"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha():\n            if len(txt.split()[-1]) == 1:\n                return True\n            else:\n                return False\n        else:\n            return False"}
{"task_id": "HumanEval/135", "completion": "    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    if len(neg_integers) == 0:\n        largest_neg = None\n    else:\n        largest_neg = max(neg_integers)\n    \n    if len(pos_integers) == 0:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos_integers)\n    \n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif type(a) == float and type(b) == float:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif (type(a) == int and type(b) == float) or (type(a) == float and type(b) == int):\n        if float(a) > float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n    elif type(a) == str and type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n    else:\n        return None\n\nprint(compare_one(1, 2.5)) # ➞ 2.5\nprint(compare_one(1, \"2,3\")) # ➞ \"2,3\"\nprint(compare_one(\"5,1\", \"6\")) # ➞ \"6\"\nprint(compare_one(\"1\", 1)) # ➞ None"}
{"task_id": "HumanEval/138", "completion": "    count = 0\n    for i in range(2, n // 2 + 1, 2):\n        if n - i in range(2, n // 2 + 1, 2):\n            count += 1\n    return count == 4"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return \"Input must be greater than 0\"\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result"}
{"task_id": "HumanEval/141", "completion": "    # Count the number of digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    \n    # Check if there is exactly one dot in the file name\n    dot_count = file_name.count('.')\n    \n    # Split the file name into two parts based on the dot\n    parts = file_name.split('.')\n    \n    # Check if the substring before the dot is not empty and starts with a letter\n    if len(parts) == 2 and parts[0] and parts[0][0].isalpha():\n        before_dot_valid = True\n    else:\n        before_dot_valid = False\n    \n    # Check if the substring after the dot is one of the valid extensions\n    after_dot_valid = parts[1] in ['txt', 'exe', 'dll']\n    \n    # Check all the conditions and return 'Yes' or 'No' accordingly\n    if digit_count <= 3 and dot_count == 1 and before_dot_valid and after_dot_valid:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "To solve this problem, we can first convert the fractions x and n into decimal numbers by dividing the numerator by the denominator. Then we can multiply the decimal representations of x and n and check if the result is a whole number.\n\nHere's the implementation of the simplify function:\n\n```python\ndef simplify(x, n):\n    x_decimal = eval(x)\n    n_decimal = eval(n)\n    result = x_decimal * n_decimal\n    return result.is_integer()\n```\n\nThis function first converts the fractions x and n into decimal numbers using the eval function. Then it multiplies the decimal representations of x and n and checks if the result is a whole number using the is_integer method.\n\nLet's test the function with the given examples:\n\n```python\nprint(simplify(\"1/5\", \"5/1\"))  # Output: True\nprint(simplify(\"1/6\", \"2/1\"))  # Output: False\nprint(simplify(\"7/10\", \"10/2\"))  # Output: False\n```\n\nThe function should return True for the first example and False for the other two examples, which matches the expected output."}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x))) if nums else []"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "To solve this problem, we can iterate through the array a and for each pair of elements (a[i], a[j]), we can check if their sum is a multiple of 3. If it is, we increment a counter to keep track of the number of valid triples.\n\nHere's a possible implementation in Python:\n\n```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Test the function\nn = 5\nprint(get_max_triples(n))  # Output: 1\n```\n\nThis implementation creates the array a using a list comprehension, then iterates through all possible triples of indices (i, j, k) and checks if the sum of the corresponding elements in a is a multiple of 3. If it is, the count is incremented. Finally, the function returns the count of valid triples."}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start_index = planets.index(planet1)\n        end_index = planets.index(planet2)\n        if start_index < end_index:\n            return tuple(planets[start_index+1:end_index])\n        else:\n            return tuple(planets[end_index+1:start_index])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares * 2"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strengths = {}\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        strengths[ext] = strength\n    strongest_ext = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # rotate the second word\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if num < 0:\n        return (odd_count, even_count)\n    else:\n        return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n    \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + remaining\n    if total_eaten >= need:\n        return [total_eaten, remaining - (need - number)]\n    else:\n        return [total_eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result if a < b else result[::-1]"}
